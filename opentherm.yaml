substitutions:
  devicename: opentherm
  upper_devicename: Opentherm

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  platformio_options:
    lib_deps:
    - ihormelnyk/OpenTherm Library @ 1.1.4
  includes:
    - esphome-opentherm/

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${devicename} Fallback"
    password: !secret esphome_fallback_password

captive_portal:
logger:
api:
ota:

dallas:
  - pin: 14
    update_interval: 5min

custom_component:
  - lambda: |-
      auto opentherm = new OpenthermComponent();
      return {opentherm};
    components:
      - id: opentherm

sensor:
  - platform: custom
    lambda: |-    
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return { 
        openthermComp->boiler_temperature, 
        openthermComp->external_temperature_sensor, 
        openthermComp->return_temperature_sensor, 
        openthermComp->pressure_sensor,
        openthermComp->modulation_sensor,
        openthermComp->heating_target_temperature_sensor
      };
    sensors:
    - name: Boiler Temperature
      unit_of_measurement: 째C
      accuracy_decimals: 1
    - name: "External Temperature"
      unit_of_measurement: 째C
      accuracy_decimals: 1
    - name: "Return Temperature"
      unit_of_measurement: 째C
      accuracy_decimals: 1
    - name: "Heating Water Pressure"
      unit_of_measurement: hPa
      accuracy_decimals: 2
    - name: "Boiler Modulation"
      unit_of_measurement: "%"
      accuracy_decimals: 1
    - name: "Heating Target Temperature"
      unit_of_measurement: 째C
      accuracy_decimals: 1

  - platform: dallas
    address: 0x6b276f750e64ff28
    name: "Temperature Sensor 1"
      
binary_sensor:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return {
        openthermComp->flame,
        openthermComp->ch_active,
        openthermComp->dhw_active,
        openthermComp->fault,
        openthermComp->diagnostic
        };
    binary_sensors:
    - name: "Flame"
      device_class: heat
    - name: "Central Heating Active"
      device_class: heat
    - name: "Hot Water Active"
      device_class: heat
    - name: "Fault"
      device_class: problem
    - name: "Diagnostic"


climate:
  - platform: custom
    lambda: |-
      OpenthermComponent *openthermComp = (OpenthermComponent*) id(opentherm);
      return {
        openthermComp->hotWaterClimate, 
        openthermComp->heatingWaterClimate
      };
    climates:
      - id: hot_water
        name: "Hot water"
      - id: heating_water
        name: "Heating water"